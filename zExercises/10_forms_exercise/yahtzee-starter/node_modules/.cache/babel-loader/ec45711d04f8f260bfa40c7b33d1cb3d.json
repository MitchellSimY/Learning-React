{"ast":null,"code":"/** Rule for Yahtzee scoring.\n *\n * This is an \"abstract class\"; the real rules are subclasses of these.\n * This stores all parameters passed into it as properties on the instance\n * (to simplify child classes so they don't need constructors of their own).\n *\n * It contains useful functions for summing, counting values, and counting\n * frequencies of dice. These are used by subclassed rules.\n */\n// Rules are completed.\nclass Rule {\n  constructor(params) {\n    // put all properties in params on instance\n    Object.assign(this, params);\n  }\n\n  sum(dice) {\n    // sum of all dice\n    return dice.reduce((prev, curr) => prev + curr);\n  }\n\n  freq(dice) {\n    // frequencies of dice values\n    const freqs = new Map();\n\n    for (let d of dice) freqs.set(d, (freqs.get(d) || 0) + 1);\n\n    return Array.from(freqs.values());\n  }\n\n  count(dice, val) {\n    // # times val appears in dice\n    return dice.filter(d => d === val).length;\n  }\n\n}\n/** Given a sought-for val, return sum of dice of that val.\n *\n * Used for rules like \"sum of all ones\"\n */\n\n\nclass TotalOneNumber extends Rule {\n  constructor(...args) {\n    super(...args);\n\n    this.evalRoll = dice => {\n      return this.val * this.count(dice, this.val);\n    };\n  }\n\n}\n/** Given a required # of same dice, return sum of all dice.\n *\n * Used for rules like \"sum of all dice when there is a 3-of-kind\"\n */\n\n\nclass SumDistro extends Rule {\n  constructor(...args) {\n    super(...args);\n\n    this.evalRoll = dice => {\n      // do any of the counts meet of exceed this distro?\n      return this.freq(dice).some(c => c >= this.count) ? this.sum(dice) : 0;\n    };\n  }\n\n}\n/** Check if full house (3-of-kind and 2-of-kind) */\n\n\nclass FullHouse extends Rule {\n  constructor(...args) {\n    super(...args);\n\n    this.evalRoll = dice => {\n      // if ((this.freq(dice)[0] === 3 || this.freq(dice)[0] === 2) &&\n      //   (this.freq(dice)[1] === 3 || this.freq(dice)[1] === 2)) {\n      //   return 25;\n      // } else {\n      //   return 0;\n      // }\n      // Smarter way of doing it.\n      // Here, there was a variable created call freq = this.freq(dice)\n      let freqs = this.freq(dice); // if the lenght = 2, and includes a 3 and 2, pump the score. duh\n\n      return freqs.length === 2 && freqs.includes(3) && freqs.includes(2) ? this.score : 0;\n    };\n  }\n\n}\n/** Check for small straights. */\n// Small straight needs 4 sequential dice. \n// 1234, 2345, 3456, \n\n\nclass SmallStraight extends Rule {\n  constructor(...args) {\n    super(...args);\n\n    this.evalRoll = dice => {\n      for (let die of dice) {\n        if (dice.includes(die + 1) && dice.includes(die + 2) && dice.includes(die + 3)) {\n          return this.score;\n        }\n      }\n\n      return 0;\n    };\n  }\n\n}\n/** Check for large straights. */\n\n\nclass LargeStraight extends Rule {\n  constructor(...args) {\n    super(...args);\n\n    this.evalRoll = dice => {\n      const d = new Set(dice); // large straight must be 5 different dice & only one can be a 1 or a 6\n      // I think what it meant to say was \"And only one can be a 1 or 6. Cannot have both\"\n\n      return d.size === 5 && (!d.has(1) || !d.has(6)) ? this.score : 0;\n    };\n  }\n\n}\n/** Check if all dice are same. */\n\n\nclass Yahtzee extends Rule {\n  constructor(...args) {\n    super(...args);\n\n    this.evalRoll = dice => {\n      // all dice must be the same\n      return this.freq(dice)[0] === 5 ? this.score : 0;\n    };\n  }\n\n} // ones, twos, etc score as sum of that value\n\n\nconst ones = new TotalOneNumber({\n  val: 1,\n  description: \"The sum of all Ones\"\n});\nconst twos = new TotalOneNumber({\n  val: 2,\n  description: \"The sum of all Twos\"\n});\nconst threes = new TotalOneNumber({\n  val: 3,\n  description: \"The sum of all Threes\"\n});\nconst fours = new TotalOneNumber({\n  val: 4,\n  description: \"The sum of all Fours\"\n});\nconst fives = new TotalOneNumber({\n  val: 5,\n  description: \"The sum of all Fives\"\n});\nconst sixes = new TotalOneNumber({\n  val: 6,\n  description: \"The sum of all Sixes\"\n}); // three/four of kind score as sum of all dice\n\nconst threeOfKind = new SumDistro({\n  count: 3,\n  description: \"The sum of all dies if 3 dies match\"\n});\nconst fourOfKind = new SumDistro({\n  count: 4,\n  description: \"The sum of all dies if 4 dies match\"\n}); // full house scores as flat 25\n\nconst fullHouse = new FullHouse({\n  score: 25,\n  description: \"25 Points for 2 Matching dies and 3 Matching dies\"\n}); // small/large straights score as 30/40\n\nconst smallStraight = new SmallStraight({\n  score: 30,\n  description: \"30 Points for 4 consecutive dies\"\n});\nconst largeStraight = new LargeStraight({\n  score: 40,\n  description: \"40 Points for 5 consecutive dies\"\n}); // yahtzee scores as 50\n\nconst yahtzee = new Yahtzee({\n  score: 50,\n  description: \"50 Points for 5 Matching dies\"\n}); // for chance, can view as some of all dice, requiring at least 0 of a kind\n\nconst chance = new SumDistro({\n  count: 0,\n  description: \"The sum of all dies\"\n});\nexport { ones, twos, threes, fours, fives, sixes, threeOfKind, fourOfKind, fullHouse, smallStraight, largeStraight, yahtzee, chance };","map":{"version":3,"sources":["/Users/msy/Programming/udemy/react/Learning-React/zExercises/10_forms_exercise/yahtzee-starter/src/Rules.js"],"names":["Rule","constructor","params","Object","assign","sum","dice","reduce","prev","curr","freq","freqs","Map","d","set","get","Array","from","values","count","val","filter","length","TotalOneNumber","evalRoll","SumDistro","some","c","FullHouse","includes","score","SmallStraight","die","LargeStraight","Set","size","has","Yahtzee","ones","description","twos","threes","fours","fives","sixes","threeOfKind","fourOfKind","fullHouse","smallStraight","largeStraight","yahtzee","chance"],"mappings":"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","sourcesContent":["/** Rule for Yahtzee scoring.\n *\n * This is an \"abstract class\"; the real rules are subclasses of these.\n * This stores all parameters passed into it as properties on the instance\n * (to simplify child classes so they don't need constructors of their own).\n *\n * It contains useful functions for summing, counting values, and counting\n * frequencies of dice. These are used by subclassed rules.\n */\n\n// Rules are completed.\nclass Rule {\n  constructor(params) {\n\n    // put all properties in params on instance\n    Object.assign(this, params);\n  }\n\n  sum(dice) {\n    // sum of all dice\n    return dice.reduce((prev, curr) => prev + curr);\n  }\n\n  freq(dice) {\n    // frequencies of dice values\n    const freqs = new Map();\n    for (let d of dice) freqs.set(d, (freqs.get(d) || 0) + 1);\n    return Array.from(freqs.values());\n  }\n\n  count(dice, val) {\n    // # times val appears in dice\n    return dice.filter(d => d === val).length;\n  }\n}\n\n/** Given a sought-for val, return sum of dice of that val.\n *\n * Used for rules like \"sum of all ones\"\n */\nclass TotalOneNumber extends Rule {\n  evalRoll = dice => {\n    return this.val * this.count(dice, this.val);\n  };\n}\n\n/** Given a required # of same dice, return sum of all dice.\n *\n * Used for rules like \"sum of all dice when there is a 3-of-kind\"\n */\nclass SumDistro extends Rule {\n  evalRoll = dice => {\n    // do any of the counts meet of exceed this distro?\n    return this.freq(dice).some(c => c >= this.count) ? this.sum(dice) : 0;\n  };\n}\n\n/** Check if full house (3-of-kind and 2-of-kind) */\nclass FullHouse extends Rule {\n  evalRoll = dice => {\n    // if ((this.freq(dice)[0] === 3 || this.freq(dice)[0] === 2) &&\n    //   (this.freq(dice)[1] === 3 || this.freq(dice)[1] === 2)) {\n    //   return 25;\n    // } else {\n    //   return 0;\n    // }\n\n    // Smarter way of doing it.\n    // Here, there was a variable created call freq = this.freq(dice)\n    let freqs = this.freq(dice)\n    // if the lenght = 2, and includes a 3 and 2, pump the score. duh\n    return freqs.length === 2 && freqs.includes(3) && freqs.includes(2) ?\n      this.score : 0;\n  }\n}\n\n/** Check for small straights. */\n// Small straight needs 4 sequential dice. \n// 1234, 2345, 3456, \nclass SmallStraight extends Rule {\n\n  evalRoll = (dice) => {\n    for (let die of dice) {\n      if (dice.includes(die + 1) && dice.includes(die + 2) && dice.includes(die + 3)) {\n        return this.score;\n      }\n    }\n    return 0;\n  }\n}\n\n/** Check for large straights. */\nclass LargeStraight extends Rule {\n  evalRoll = dice => {\n    const d = new Set(dice);\n\n    // large straight must be 5 different dice & only one can be a 1 or a 6\n    // I think what it meant to say was \"And only one can be a 1 or 6. Cannot have both\"\n    return d.size === 5 && (!d.has(1) || !d.has(6)) ? this.score : 0;\n  };\n}\n\n/** Check if all dice are same. */\nclass Yahtzee extends Rule {\n  evalRoll = dice => {\n    // all dice must be the same\n    return this.freq(dice)[0] === 5 ? this.score : 0;\n  };\n}\n\n// ones, twos, etc score as sum of that value\nconst ones = new TotalOneNumber({ val: 1, description: \"The sum of all Ones\" });\nconst twos = new TotalOneNumber({ val: 2, description: \"The sum of all Twos\" });\nconst threes = new TotalOneNumber({ val: 3, description: \"The sum of all Threes\" });\nconst fours = new TotalOneNumber({ val: 4, description: \"The sum of all Fours\" });\nconst fives = new TotalOneNumber({ val: 5, description: \"The sum of all Fives\" });\nconst sixes = new TotalOneNumber({ val: 6, description: \"The sum of all Sixes\" });\n\n// three/four of kind score as sum of all dice\nconst threeOfKind = new SumDistro({ count: 3, description: \"The sum of all dies if 3 dies match\" });\nconst fourOfKind = new SumDistro({ count: 4, description: \"The sum of all dies if 4 dies match\" });\n\n// full house scores as flat 25\nconst fullHouse = new FullHouse({ score: 25, description: \"25 Points for 2 Matching dies and 3 Matching dies\" });\n\n// small/large straights score as 30/40\nconst smallStraight = new SmallStraight({ score: 30, description: \"30 Points for 4 consecutive dies\" });\nconst largeStraight = new LargeStraight({ score: 40, description: \"40 Points for 5 consecutive dies\" });\n\n// yahtzee scores as 50\nconst yahtzee = new Yahtzee({ score: 50, description: \"50 Points for 5 Matching dies\" });\n\n// for chance, can view as some of all dice, requiring at least 0 of a kind\nconst chance = new SumDistro({ count: 0, description: \"The sum of all dies\" });\n\nexport {\n  ones,\n  twos,\n  threes,\n  fours,\n  fives,\n  sixes,\n  threeOfKind,\n  fourOfKind,\n  fullHouse,\n  smallStraight,\n  largeStraight,\n  yahtzee,\n  chance\n};\n"]},"metadata":{},"sourceType":"module"}