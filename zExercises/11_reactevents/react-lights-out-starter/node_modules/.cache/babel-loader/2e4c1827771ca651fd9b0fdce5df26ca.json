{"ast":null,"code":"import _slicedToArray from \"E:\\\\xampp\\\\htdocs\\\\CSCI2006\\\\zJunk\\\\reactColt\\\\Learning-React\\\\zExercises\\\\11_reactevents\\\\react-lights-out-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\xampp\\\\htdocs\\\\CSCI2006\\\\zJunk\\\\reactColt\\\\Learning-React\\\\zExercises\\\\11_reactevents\\\\react-lights-out-starter\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  constructor(props) {\n    super(props); // TODO: set initial state\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  createBoard() {\n    let board = []; // TODO: create array-of-arrays of true/false values\n\n    return board;\n  }\n  /** handle changing a cell: update board & determine if winner */\n\n\n  flipCellsAround(coord) {\n    let _this$props = this.props,\n        ncols = _this$props.ncols,\n        nrows = _this$props.nrows;\n    let board = this.state.board;\n\n    let _coord$split$map = coord.split(\"-\").map(Number),\n        _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n        y = _coord$split$map2[0],\n        x = _coord$split$map2[1];\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    } // TODO: flip this cell and the cells around it\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    // this.setState({board, hasWon});\n\n  }\n  /** Render game board or winning message. */\n\n\n  render() {\n    const cells = Array.from({\n      length: this.props.nrows\n    }).map(() => /*#__PURE__*/React.createElement(Cell, {\n      isLit: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }));\n    const cellsVert = Array.from({\n      length: this.props.ncols\n    }).map(() => cells);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      className: \"Board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, cellsVert)))); // if the game is won, just show a winning msg & render nothing else\n    // TODO\n    // make table board\n    // TODO\n  }\n\n}\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5 // chanceLightStartsOn\n\n};\nexport default Board;","map":{"version":3,"sources":["E:/xampp/htdocs/CSCI2006/zJunk/reactColt/Learning-React/zExercises/11_reactevents/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","constructor","props","createBoard","board","flipCellsAround","coord","ncols","nrows","state","split","map","Number","y","x","flipCell","render","cells","Array","from","length","cellsVert","defaultProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAE5BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAGjB;AACD;;AAQD;AAEAC,EAAAA,WAAW,GAAG;AACZ,QAAIC,KAAK,GAAG,EAAZ,CADY,CAEZ;;AACA,WAAOA,KAAP;AACD;AAED;;;AAEAC,EAAAA,eAAe,CAACC,KAAD,EAAQ;AAAA,sBACE,KAAKJ,KADP;AAAA,QACfK,KADe,eACfA,KADe;AAAA,QACRC,KADQ,eACRA,KADQ;AAErB,QAAIJ,KAAK,GAAG,KAAKK,KAAL,CAAWL,KAAvB;;AAFqB,2BAGRE,KAAK,CAACI,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAHQ;AAAA;AAAA,QAGhBC,CAHgB;AAAA,QAGbC,CAHa;;AAMrB,aAASC,QAAT,CAAkBF,CAAlB,EAAqBC,CAArB,EAAwB;AACtB;AAEA,UAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGP,KAAd,IAAuBM,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGL,KAAzC,EAAgD;AAC9CJ,QAAAA,KAAK,CAACS,CAAD,CAAL,CAASC,CAAT,IAAc,CAACV,KAAK,CAACS,CAAD,CAAL,CAASC,CAAT,CAAf;AACD;AACF,KAZoB,CAcrB;AAEA;AACA;AAEA;;AACD;AAGD;;;AAEAE,EAAAA,MAAM,GAAG;AACP,UAAMC,KAAK,GAAGC,KAAK,CAACC,IAAN,CAAW;AAAEC,MAAAA,MAAM,EAAE,KAAKlB,KAAL,CAAWM;AAArB,KAAX,EAAyCG,GAAzC,CACZ,mBAAM,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADM,CAAd;AAEA,UAAMU,SAAS,GAAGH,KAAK,CAACC,IAAN,CAAW;AAACC,MAAAA,MAAM,EAAE,KAAKlB,KAAL,CAAWK;AAApB,KAAX,EAAuCI,GAAvC,CAChB,MAAMM,KADU,CAAlB;AAGA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAO,MAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEGI,SAFH,CADF,CADF,CADF,CADF,CANO,CAoBP;AAEA;AAEA;AAEA;AACD;;AA5E2B;;AAAxBrB,K,CAQGsB,Y,GAAe;AACpBd,EAAAA,KAAK,EAAE,CADa;AAEpBD,EAAAA,KAAK,EAAE,CAFa,CAGpB;;AAHoB,C;AAwExB,eAAeP,KAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n  }\n\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    // chanceLightStartsOn\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    // this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    const cells = Array.from({ length: this.props.nrows }).map(\n      () => <Cell isLit={true}/>)\n    const cellsVert = Array.from({length: this.props.ncols}).map(\n      () => cells)\n\n    return (\n      <div>\n        <table className=\"Board\">\n          <tbody>\n            <tr>\n\n              {cellsVert}\n\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    )\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}